version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-dotnet/Infrastructure/Data/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # DotNet Backend
  dotnet-backend:
    build:
      context: ./backend-dotnet
      dockerfile: Dockerfile
    container_name: ecommerce-dotnet-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=ecommerce_db;Username=ecommerce_user;Password=ecommerce_password;
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./backend-dotnet/logs:/app/logs

  # Spring Backend (temporarily disabled)
  # spring-backend:
  #   build:
  #     context: ./backend-spring
  #     dockerfile: Dockerfile
  #   container_name: ecommerce-spring-backend
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ecommerce_db
  #     - SPRING_DATASOURCE_USERNAME=ecommerce_user
  #     - SPRING_DATASOURCE_PASSWORD=ecommerce_password
  #     - SPRING_JPA_HIBERNATE_DDL_AUTO=update
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - ecommerce-network

  # Frontend (temporarily disabled)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend
  #   container_name: ecommerce-frontend
  #   environment:
  #     - NEXT_PUBLIC_DOTNET_API_URL=http://localhost:5000/api
  #     - NEXT_PUBLIC_SPRING_API_URL=http://localhost:8081/api/v1
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - dotnet-backend
  #   networks:
  #     - ecommerce-network

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network
    volumes:
      - redis_data:/data

  # Nginx (Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - dotnet-backend
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge